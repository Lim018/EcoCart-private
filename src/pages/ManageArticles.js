"use client"

import { useState, useEffect, useRef } from "react"
import { DndProvider, useDrag, useDrop } from "react-dnd"
import { HTML5Backend } from "react-dnd-html5-backend"
import { motion, AnimatePresence } from "framer-motion"
import "../styles/ManageArticles.css"

// Mock data for articles
const initialArticles = [
  {
    id: 1,
    title: "The Impact of Fast Fashion on Our Environment",
    slug: "impact-fast-fashion-environment",
    excerpt:
      "Exploring how the fast fashion industry contributes to environmental degradation and what consumers can do about it.",
    content: `
      <h2>The Environmental Cost of Fast Fashion</h2>
      <p>The fashion industry is one of the largest polluters in the world. Fast fashion, characterized by rapid production cycles and low-cost garments, has exacerbated this issue.</p>
      <p>According to recent studies, the fashion industry is responsible for 10% of global carbon emissions, making it one of the most polluting industries worldwide.</p>
      <img src="/circular-fashion-cycle.png" alt="Circular Fashion Cycle" />
      <h2>Water Pollution and Consumption</h2>
      <p>Textile dyeing is the second largest polluter of water globally. The process requires vast amounts of water, and many factories discharge untreated wastewater into rivers.</p>
      <p>It takes about 2,000 gallons of water to produce a single pair of jeans. This is equivalent to the amount of water one person drinks over a 7-year period.</p>
      <h2>Sustainable Alternatives</h2>
      <p>Consumers can make a difference by choosing sustainable fashion options. This includes buying from ethical brands, purchasing second-hand clothing, and extending the lifespan of garments through proper care.</p>
      <p>Many innovative companies are now developing eco-friendly fabrics and implementing circular business models to reduce waste and environmental impact.</p>
    `,
    author: "Emma Rodriguez",
    category: "sustainability",
    tags: ["fashion", "environment", "sustainability"],
    featuredImage: "/circular-fashion-cycle.png",
    status: "published",
    publishDate: "2023-05-15T10:00:00Z",
    lastModified: "2023-05-20T14:30:00Z",
  },
  {
    id: 2,
    title: "Zero Waste Living: A Beginner's Guide",
    slug: "zero-waste-living-beginners-guide",
    excerpt: "Simple steps to reduce waste in your daily life and move towards a more sustainable lifestyle.",
    content: `
      <h2>Understanding Zero Waste</h2>
      <p>Zero waste living is about reducing the amount of trash we send to landfills by making conscious choices about what we buy and how we dispose of items.</p>
      <p>The concept follows a hierarchy: Refuse, Reduce, Reuse, Recycle, and Rot (compost).</p>
      <img src="/backyard-compost-system.png" alt="Backyard Composting System" />
      <h2>Getting Started</h2>
      <p>Begin with simple swaps like using reusable shopping bags, water bottles, and coffee cups. These small changes can significantly reduce your plastic waste.</p>
      <p>Next, consider your food packaging. Shop at bulk stores with your own containers and buy fresh produce without packaging when possible.</p>
      <h2>Beyond the Basics</h2>
      <p>As you progress, look at other areas of your home. Replace disposable items with reusable alternatives, such as cloth napkins, beeswax wraps, and safety razors.</p>
      <p>Remember, zero waste is a journey, not a destination. Focus on progress, not perfection.</p>
    `,
    author: "Michael Chang",
    category: "lifestyle",
    tags: ["zero-waste", "sustainability", "lifestyle"],
    featuredImage: "/backyard-compost-system.png",
    status: "published",
    publishDate: "2023-06-10T09:15:00Z",
    lastModified: "2023-06-12T11:45:00Z",
  },
  {
    id: 3,
    title: "Understanding Carbon Footprints",
    slug: "understanding-carbon-footprints",
    excerpt: "What carbon footprints are, how they're calculated, and why they matter for our planet's future.",
    content: `
      <h2>What is a Carbon Footprint?</h2>
      <p>A carbon footprint is the total amount of greenhouse gases (including carbon dioxide and methane) that are generated by our actions.</p>
      <p>The average carbon footprint for a person in the United States is 16 tons, one of the highest rates in the world.</p>
      <img src="/global-carbon-cycle.png" alt="Global Carbon Cycle" />
      <h2>Calculating Your Impact</h2>
      <p>Carbon footprints can be measured by undertaking a greenhouse gas emissions assessment. Various online calculators can help individuals determine their carbon footprint.</p>
      <p>Major contributors to an individual's carbon footprint include transportation, housing, and food.</p>
      <h2>Reducing Your Footprint</h2>
      <p>There are many ways to reduce your carbon footprint, such as using public transportation, eating locally-sourced foods, and improving home energy efficiency.</p>
      <p>Carbon offsets can also be purchased to balance out emissions that cannot be eliminated.</p>
    `,
    author: "Dr. James Wilson",
    category: "climate",
    tags: ["carbon-footprint", "climate-change", "sustainability"],
    featuredImage: "/global-carbon-cycle.png",
    status: "draft",
    publishDate: null,
    lastModified: "2023-07-05T16:20:00Z",
  },
  {
    id: 4,
    title: "Plastic Alternatives for Everyday Items",
    slug: "plastic-alternatives-everyday-items",
    excerpt:
      "Discover eco-friendly alternatives to common plastic products that can help reduce your environmental impact.",
    content: `
      <h2>The Plastic Problem</h2>
      <p>Plastic pollution is one of the most pressing environmental issues of our time. Every year, millions of tons of plastic end up in our oceans, harming marine life and ecosystems.</p>
      <p>Single-use plastics, in particular, contribute significantly to this problem due to their short lifespan and poor recycling rates.</p>
      <img src="/cascading-plastic-alternatives.png" alt="Plastic Alternatives" />
      <h2>Kitchen Alternatives</h2>
      <p>In the kitchen, consider using beeswax wraps instead of plastic wrap, stainless steel or glass containers instead of plastic ones, and bamboo utensils instead of plastic utensils.</p>
      <p>For grocery shopping, bring your own cloth bags, produce bags, and containers for bulk items.</p>
      <h2>Bathroom Alternatives</h2>
      <p>In the bathroom, switch to bamboo toothbrushes, bar soap instead of liquid soap in plastic bottles, and solid shampoo and conditioner bars.</p>
      <p>Menstrual products also have eco-friendly alternatives, such as menstrual cups, cloth pads, and period underwear.</p>
    `,
    author: "Sophia Lee",
    category: "lifestyle",
    tags: ["plastic-free", "sustainability", "eco-friendly"],
    featuredImage: "/cascading-plastic-alternatives.png",
    status: "scheduled",
    publishDate: "2023-08-20T08:00:00Z",
    lastModified: "2023-07-25T13:10:00Z",
  },
  {
    id: 5,
    title: "The Rise of Sustainable Fashion Brands",
    slug: "rise-sustainable-fashion-brands",
    excerpt:
      "How innovative fashion brands are leading the way in sustainability and changing the industry for the better.",
    content: `
      <h2>A Shift in the Fashion Industry</h2>
      <p>In recent years, there has been a significant shift in the fashion industry towards more sustainable practices. This change is driven by both consumer demand and a growing awareness of environmental issues.</p>
      <p>Sustainable fashion brands focus on ethical production, fair labor practices, and environmentally friendly materials.</p>
      <img src="/interconnected-eco-production.png" alt="Eco-friendly Production" />
      <h2>Innovative Materials</h2>
      <p>Many sustainable brands are experimenting with innovative materials, such as fabrics made from recycled plastic bottles, agricultural waste, and even mushrooms.</p>
      <p>These materials not only reduce waste but often have a lower carbon footprint compared to conventional fabrics.</p>
      <h2>Transparency and Traceability</h2>
      <p>A key aspect of sustainable fashion is transparency. Brands are increasingly sharing information about their supply chains, allowing consumers to make more informed choices.</p>
      <p>Some companies are even using blockchain technology to provide complete traceability from raw material to finished product.</p>
    `,
    author: "Emma Rodriguez",
    category: "fashion",
    tags: ["fashion", "sustainability", "ethical-brands"],
    featuredImage: "/interconnected-eco-production.png",
    status: "published",
    publishDate: "2023-07-08T11:30:00Z",
    lastModified: "2023-07-10T09:45:00Z",
  },
]

// Available article categories
const categories = [
  { id: "sustainability", name: "Sustainability" },
  { id: "lifestyle", name: "Lifestyle" },
  { id: "climate", name: "Climate" },
  { id: "fashion", name: "Fashion" },
  { id: "technology", name: "Technology" },
  { id: "food", name: "Food & Nutrition" },
]

// Available tags for autocomplete
const availableTags = [
  "sustainability",
  "environment",
  "eco-friendly",
  "zero-waste",
  "plastic-free",
  "climate-change",
  "carbon-footprint",
  "renewable-energy",
  "fashion",
  "ethical-brands",
  "slow-fashion",
  "minimalism",
  "lifestyle",
  "wellness",
  "health",
  "organic",
  "vegan",
  "technology",
  "innovation",
  "green-tech",
  "solar",
  "recycling",
  "food",
  "plant-based",
  "local",
  "seasonal",
  "fair-trade",
]

// Media library items
const initialMediaItems = [
  {
    id: 1,
    name: "Circular Fashion Cycle",
    type: "image",
    url: "/circular-fashion-cycle.png",
    uploadDate: "2023-05-10T09:30:00Z",
  },
  {
    id: 2,
    name: "Backyard Compost System",
    type: "image",
    url: "/backyard-compost-system.png",
    uploadDate: "2023-06-05T14:20:00Z",
  },
  {
    id: 3,
    name: "Global Carbon Cycle",
    type: "image",
    url: "/global-carbon-cycle.png",
    uploadDate: "2023-06-28T11:15:00Z",
  },
  {
    id: 4,
    name: "Cascading Plastic Alternatives",
    type: "image",
    url: "/cascading-plastic-alternatives.png",
    uploadDate: "2023-07-15T16:40:00Z",
  },
  {
    id: 5,
    name: "Interconnected Eco Production",
    type: "image",
    url: "/interconnected-eco-production.png",
    uploadDate: "2023-07-02T10:50:00Z",
  },
  { id: 6, name: "Emerald Canopy", type: "image", url: "/emerald-canopy.png", uploadDate: "2023-04-18T13:25:00Z" },
  { id: 7, name: "Serene Gaze", type: "image", url: "/serene-gaze.png", uploadDate: "2023-05-22T15:10:00Z" },
  { id: 8, name: "Thoughtful Gaze", type: "image", url: "/thoughtful-gaze.png", uploadDate: "2023-06-14T09:05:00Z" },
]

// Draggable content block component
const ContentBlock = ({ id, content, index, moveBlock, handleContentChange, handleDeleteBlock }) => {
  const ref = useRef(null)

  const [{ isDragging }, drag] = useDrag({
    type: "CONTENT_BLOCK",
    item: { id, index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  })

  const [, drop] = useDrop({
    accept: "CONTENT_BLOCK",
    hover: (item, monitor) => {
      if (!ref.current) {
        return
      }
      const dragIndex = item.index
      const hoverIndex = index

      if (dragIndex === hoverIndex) {
        return
      }

      moveBlock(dragIndex, hoverIndex)
      item.index = hoverIndex
    },
  })

  drag(drop(ref))

  // Determine if the block is a paragraph, heading, or image
  const getBlockType = () => {
    if (content.startsWith("<h")) return "heading"
    if (content.startsWith("<img")) return "image"
    return "paragraph"
  }

  const blockType = getBlockType()

  // Extract content for editing
  const getEditableContent = () => {
    if (blockType === "heading") {
      const match = content.match(/<h\d>(.*?)<\/h\d>/)
      return match ? match[1] : ""
    } else if (blockType === "paragraph") {
      const match = content.match(/<p>(.*?)<\/p>/)
      return match ? match[1] : ""
    } else if (blockType === "image") {
      const srcMatch = content.match(/src="(.*?)"/)
      const altMatch = content.match(/alt="(.*?)"/)
      return {
        src: srcMatch ? srcMatch[1] : "",
        alt: altMatch ? altMatch[1] : "",
      }
    }
    return ""
  }

  // Handle content change based on block type
  const onContentChange = (e) => {
    let newContent
    if (blockType === "heading") {
      newContent = `<h2>${e.target.value}</h2>`
    } else if (blockType === "paragraph") {
      newContent = `<p>${e.target.value}</p>`
    }
    handleContentChange(index, newContent)
  }

  // Render different inputs based on block type
  const renderBlockInput = () => {
    if (blockType === "heading") {
      return (
        <input
          type="text"
          value={getEditableContent()}
          onChange={onContentChange}
          placeholder="Heading text"
          className="block-input heading-input"
        />
      )
    } else if (blockType === "paragraph") {
      return (
        <textarea
          value={getEditableContent()}
          onChange={onContentChange}
          placeholder="Paragraph text"
          className="block-input paragraph-input"
        />
      )
    } else if (blockType === "image") {
      const { src, alt } = getEditableContent()
      return (
        <div className="image-block-content">
          <img src={src || "/placeholder.svg"} alt={alt} className="block-image-preview" />
          <div className="image-block-inputs">
            <input
              type="text"
              value={alt}
              onChange={(e) => {
                const newContent = content.replace(/alt="(.*?)"/, `alt="${e.target.value}"`)
                handleContentChange(index, newContent)
              }}
              placeholder="Image alt text"
              className="block-input image-alt-input"
            />
          </div>
        </div>
      )
    }
  }

  return (
    <div
      ref={ref}
      className={`content-block ${blockType}-block ${isDragging ? "dragging" : ""}`}
      style={{ opacity: isDragging ? 0.5 : 1 }}
    >
      <div className="block-header">
        <div className="block-type">
          {blockType === "heading" && <i className="fas fa-heading"></i>}
          {blockType === "paragraph" && <i className="fas fa-paragraph"></i>}
          {blockType === "image" && <i className="fas fa-image"></i>}
          <span>{blockType.charAt(0).toUpperCase() + blockType.slice(1)}</span>
        </div>
        <div className="block-actions">
          <button className="block-action-btn" title="Drag to reorder">
            <i className="fas fa-grip-lines"></i>
          </button>
          <button className="block-action-btn delete-btn" onClick={() => handleDeleteBlock(index)} title="Delete block">
            <i className="fas fa-trash-alt"></i>
          </button>
        </div>
      </div>
      <div className="block-content">{renderBlockInput()}</div>
    </div>
  )
}

// Tag selector component
const TagSelector = ({ selectedTags, setSelectedTags }) => {
  const [inputValue, setInputValue] = useState("")
  const [suggestions, setSuggestions] = useState([])
  const [showSuggestions, setShowSuggestions] = useState(false)

  const handleInputChange = (e) => {
    const value = e.target.value
    setInputValue(value)

    if (value.trim()) {
      const filteredSuggestions = availableTags
        .filter((tag) => tag.toLowerCase().includes(value.toLowerCase()))
        .filter((tag) => !selectedTags.includes(tag))
      setSuggestions(filteredSuggestions)
      setShowSuggestions(true)
    } else {
      setSuggestions([])
      setShowSuggestions(false)
    }
  }

  const addTag = (tag) => {
    if (tag.trim() && !selectedTags.includes(tag)) {
      setSelectedTags([...selectedTags, tag])
      setInputValue("")
      setSuggestions([])
      setShowSuggestions(false)
    }
  }

  const removeTag = (tagToRemove) => {
    setSelectedTags(selectedTags.filter((tag) => tag !== tagToRemove))
  }

  return (
    <div className="tag-selector">
      <div className="selected-tags">
        {selectedTags.map((tag, index) => (
          <motion.div key={index} className="tag" initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}>
            <span>{tag}</span>
            <button onClick={() => removeTag(tag)}>×</button>
          </motion.div>
        ))}
      </div>
      <div className="tag-input-container">
        <input
          type="text"
          value={inputValue}
          onChange={handleInputChange}
          placeholder="Add tags..."
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              e.preventDefault()
              addTag(inputValue)
            }
          }}
          onFocus={() => setShowSuggestions(true)}
        />
        {showSuggestions && suggestions.length > 0 && (
          <div className="tag-suggestions">
            {suggestions.map((suggestion, index) => (
              <div key={index} className="tag-suggestion" onClick={() => addTag(suggestion)}>
                {suggestion}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

// Media library component
const MediaLibrary = ({ mediaItems, onSelectMedia, onClose }) => {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedItem, setSelectedItem] = useState(null)

  const filteredItems = mediaItems.filter((item) => item.name.toLowerCase().includes(searchTerm.toLowerCase()))

  const handleSelect = () => {
    if (selectedItem) {
      onSelectMedia(selectedItem)
      onClose()
    }
  }

  return (
    <div className="media-library-overlay">
      <div className="media-library">
        <div className="media-library-header">
          <h3>Media Library</h3>
          <button className="close-btn" onClick={onClose}>
            ×
          </button>
        </div>

        <div className="media-search">
          <input
            type="text"
            placeholder="Search media..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <div className="media-grid">
          {filteredItems.map((item) => (
            <div
              key={item.id}
              className={`media-item ${selectedItem?.id === item.id ? "selected" : ""}`}
              onClick={() => setSelectedItem(item)}
            >
              <img src={item.url || "/placeholder.svg"} alt={item.name} />
              <div className="media-item-info">
                <span className="media-item-name">{item.name}</span>
                <span className="media-item-date">{new Date(item.uploadDate).toLocaleDateString()}</span>
              </div>
            </div>
          ))}
        </div>

        <div className="media-library-footer">
          <button className="action-button" onClick={onClose}>
            Cancel
          </button>
          <button className="action-button primary-button" onClick={handleSelect} disabled={!selectedItem}>
            Select
          </button>
        </div>
      </div>
    </div>
  )
}

// Rich text editor component
const RichTextEditor = ({ content, setContent }) => {
  // Parse content into blocks
  const parseContent = () => {
    if (!content) return []

    const parser = new DOMParser()
    const doc = parser.parseFromString(content, "text/html")
    const elements = Array.from(doc.body.children)

    return elements.map((el) => el.outerHTML)
  }

  const [contentBlocks, setContentBlocks] = useState(parseContent())

  // Update parent content when blocks change
  useEffect(() => {
    setContent(contentBlocks.join("\n"))
  }, [contentBlocks, setContent])

  // Move block
  const moveBlock = (dragIndex, hoverIndex) => {
    const draggedBlock = contentBlocks[dragIndex]
    const newBlocks = [...contentBlocks]
    newBlocks.splice(dragIndex, 1)
    newBlocks.splice(hoverIndex, 0, draggedBlock)
    setContentBlocks(newBlocks)
  }

  // Handle content change
  const handleContentChange = (index, newContent) => {
    const newBlocks = [...contentBlocks]
    newBlocks[index] = newContent
    setContentBlocks(newBlocks)
  }

  // Handle delete block
  const handleDeleteBlock = (index) => {
    const newBlocks = [...contentBlocks]
    newBlocks.splice(index, 1)
    setContentBlocks(newBlocks)
  }

  // Add new block
  const addBlock = (type) => {
    let newBlock
    switch (type) {
      case "heading":
        newBlock = "<h2>New Heading</h2>"
        break
      case "paragraph":
        newBlock = "<p>New paragraph text...</p>"
        break
      case "image":
        setShowMediaLibrary(true)
        return
      default:
        return
    }

    setContentBlocks([...contentBlocks, newBlock])
  }

  // Handle media selection
  const [showMediaLibrary, setShowMediaLibrary] = useState(false)

  const handleSelectMedia = (media) => {
    const newBlock = `<img src="${media.url}" alt="${media.name}" />`
    setContentBlocks([...contentBlocks, newBlock])
  }

  return (
    <div className="rich-text-editor">
      <div className="editor-toolbar">
        <button className="toolbar-btn" onClick={() => addBlock("heading")} title="Add Heading">
          <i className="fas fa-heading"></i>
        </button>
        <button className="toolbar-btn" onClick={() => addBlock("paragraph")} title="Add Paragraph">
          <i className="fas fa-paragraph"></i>
        </button>
        <button className="toolbar-btn" onClick={() => addBlock("image")} title="Add Image">
          <i className="fas fa-image"></i>
        </button>
      </div>

      <div className="editor-content">
        {contentBlocks.map((block, index) => (
          <ContentBlock
            key={index}
            id={`block-${index}`}
            content={block}
            index={index}
            moveBlock={moveBlock}
            handleContentChange={handleContentChange}
            handleDeleteBlock={handleDeleteBlock}
          />
        ))}

        {contentBlocks.length === 0 && (
          <div className="empty-editor">
            <p>Start adding content blocks using the toolbar above.</p>
          </div>
        )}
      </div>

      {showMediaLibrary && (
        <MediaLibrary
          mediaItems={initialMediaItems}
          onSelectMedia={handleSelectMedia}
          onClose={() => setShowMediaLibrary(false)}
        />
      )}
    </div>
  )
}

// Content preview component
const ContentPreview = ({ content }) => {
  return (
    <div className="content-preview">
      <div className="preview-content" dangerouslySetInnerHTML={{ __html: content }} />
    </div>
  )
}

// Scheduling calendar component
const SchedulingCalendar = ({ publishDate, setPublishDate }) => {
  const [showCalendar, setShowCalendar] = useState(false)
  const [selectedDate, setSelectedDate] = useState(publishDate ? new Date(publishDate) : new Date())
  const [selectedTime, setSelectedTime] = useState(
    publishDate
      ? `${new Date(publishDate).getHours().toString().padStart(2, "0")}:${new Date(publishDate).getMinutes().toString().padStart(2, "0")}`
      : "09:00",
  )

  const handleDateSelect = (date) => {
    setSelectedDate(date)
  }

  const handleTimeChange = (e) => {
    setSelectedTime(e.target.value)
  }

  const handleSave = () => {
    const [hours, minutes] = selectedTime.split(":").map(Number)
    const dateTime = new Date(selectedDate)
    dateTime.setHours(hours, minutes, 0, 0)
    setPublishDate(dateTime.toISOString())
    setShowCalendar(false)
  }

  const formatDate = (dateString) => {
    if (!dateString) return "Not scheduled"
    const date = new Date(dateString)
    return date.toLocaleString()
  }

  // Generate calendar days
  const generateCalendarDays = () => {
    const year = selectedDate.getFullYear()
    const month = selectedDate.getMonth()

    const firstDay = new Date(year, month, 1)
    const lastDay = new Date(year, month + 1, 0)

    const daysInMonth = lastDay.getDate()
    const startingDayOfWeek = firstDay.getDay()

    const days = []

    // Add empty cells for days before the first day of the month
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null)
    }

    // Add days of the month
    for (let i = 1; i <= daysInMonth; i++) {
      days.push(new Date(year, month, i))
    }

    return days
  }

  const days = generateCalendarDays()
  const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ]

  return (
    <div className="scheduling-calendar">
      <div className="schedule-display" onClick={() => setShowCalendar(!showCalendar)}>
        <i className="fas fa-calendar-alt"></i>
        <span>{formatDate(publishDate)}</span>
        <i className={`fas fa-chevron-${showCalendar ? "up" : "down"}`}></i>
      </div>

      {showCalendar && (
        <div className="calendar-dropdown">
          <div className="calendar-header">
            <button
              className="month-nav"
              onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() - 1, 1))}
            >
              <i className="fas fa-chevron-left"></i>
            </button>
            <h4>
              {months[selectedDate.getMonth()]} {selectedDate.getFullYear()}
            </h4>
            <button
              className="month-nav"
              onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1))}
            >
              <i className="fas fa-chevron-right"></i>
            </button>
          </div>

          <div className="calendar-grid">
            {weekdays.map((day) => (
              <div key={day} className="weekday">
                {day}
              </div>
            ))}

            {days.map((day, index) => (
              <div
                key={index}
                className={`calendar-day ${!day ? "empty" : ""} ${
                  day &&
                  day.getDate() === selectedDate.getDate() &&
                  day.getMonth() === selectedDate.getMonth() &&
                  day.getFullYear() === selectedDate.getFullYear()
                    ? "selected"
                    : ""
                }`}
                onClick={() => day && handleDateSelect(day)}
              >
                {day && day.getDate()}
              </div>
            ))}
          </div>

          <div className="time-selector">
            <label>Time:</label>
            <input type="time" value={selectedTime} onChange={handleTimeChange} />
          </div>

          <div className="calendar-actions">
            <button
              className="action-button"
              onClick={() => {
                setPublishDate(null)
                setShowCalendar(false)
              }}
            >
              Clear
            </button>
            <button className="action-button primary-button" onClick={handleSave}>
              Set Date & Time
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

// Main component
const ManageArticles = () => {
  const [articles, setArticles] = useState(initialArticles)
  const [selectedArticles, setSelectedArticles] = useState([])
  const [editingArticle, setEditingArticle] = useState(null)
  const [isEditing, setIsEditing] = useState(false)
  const [showConfirmation, setShowConfirmation] = useState(false)
  const [confirmationAction, setConfirmationAction] = useState(null)
  const [undoStack, setUndoStack] = useState([])
  const [redoStack, setRedoStack] = useState([])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterCategory, setFilterCategory] = useState("")
  const [filterStatus, setFilterStatus] = useState("")
  const [sortField, setSortField] = useState("title")
  const [sortDirection, setSortDirection] = useState("asc")
  const [mediaItems, setMediaItems] = useState(initialMediaItems)
  const [showMediaLibrary, setShowMediaLibrary] = useState(false)

  // Filter and sort articles
  const filteredArticles = articles
    .filter((article) => {
      const matchesSearch =
        article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        article.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||
        article.tags.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase()))

      const matchesCategory = filterCategory ? article.category === filterCategory : true
      const matchesStatus = filterStatus ? article.status === filterStatus : true

      return matchesSearch && matchesCategory && matchesStatus
    })
    .sort((a, b) => {
      let valueA, valueB

      if (sortField === "publishDate") {
        valueA = a.publishDate ? new Date(a.publishDate).getTime() : 0
        valueB = b.publishDate ? new Date(b.publishDate).getTime() : 0
      } else {
        valueA = a[sortField]
        valueB = b[sortField]
      }

      if (sortDirection === "asc") {
        return valueA > valueB ? 1 : -1
      } else {
        return valueA < valueB ? 1 : -1
      }
    })

  // Handle sort change
  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("asc")
    }
  }

  // Handle article selection
  const toggleArticleSelection = (articleId) => {
    if (selectedArticles.includes(articleId)) {
      setSelectedArticles(selectedArticles.filter((id) => id !== articleId))
    } else {
      setSelectedArticles([...selectedArticles, articleId])
    }
  }

  // Handle select all
  const toggleSelectAll = () => {
    if (selectedArticles.length === filteredArticles.length) {
      setSelectedArticles([])
    } else {
      setSelectedArticles(filteredArticles.map((article) => article.id))
    }
  }

  // Handle edit article
  const handleEditArticle = (article) => {
    setEditingArticle({ ...article })
    setIsEditing(true)
  }

  // Generate slug from title
  const generateSlug = (title) => {
    return title
      .toLowerCase()
      .replace(/[^\w\s-]/g, "")
      .replace(/\s+/g, "-")
  }

  // Handle save article
  const handleSaveArticle = () => {
    // Save to undo stack
    setUndoStack([...undoStack, [...articles]])
    setRedoStack([])

    // Update slug if title changed
    if (!editingArticle.slug || editingArticle.title !== articles.find((a) => a.id === editingArticle.id)?.title) {
      editingArticle.slug = generateSlug(editingArticle.title)
    }

    // Update last modified date
    editingArticle.lastModified = new Date().toISOString()

    if (editingArticle.id) {
      // Update existing article
      setArticles(articles.map((a) => (a.id === editingArticle.id ? editingArticle : a)))
    } else {
      // Add new article
      const newArticle = {
        ...editingArticle,
        id: Math.max(...articles.map((a) => a.id)) + 1,
        lastModified: new Date().toISOString(),
      }
      setArticles([...articles, newArticle])
    }

    setIsEditing(false)
    setEditingArticle(null)

    // Show confirmation
    setShowConfirmation(true)
    setTimeout(() => setShowConfirmation(false), 3000)
  }

  // Handle cancel edit
  const handleCancelEdit = () => {
    setIsEditing(false)
    setEditingArticle(null)
  }

  // Handle new article
  const handleNewArticle = () => {
    setEditingArticle({
      title: "",
      slug: "",
      excerpt: "",
      content: "",
      author: "",
      category: "",
      tags: [],
      featuredImage: "",
      status: "draft",
      publishDate: null,
      lastModified: new Date().toISOString(),
    })
    setIsEditing(true)
  }

  // Handle bulk actions
  const handleBulkAction = (action) => {
    setConfirmationAction({
      type: action,
      callback: () => {
        // Save to undo stack
        setUndoStack([...undoStack, [...articles]])
        setRedoStack([])

        switch (action) {
          case "delete":
            setArticles(articles.filter((a) => !selectedArticles.includes(a.id)))
            break
          case "publish":
            setArticles(
              articles.map((a) =>
                selectedArticles.includes(a.id)
                  ? { ...a, status: "published", publishDate: new Date().toISOString() }
                  : a,
              ),
            )
            break
          case "draft":
            setArticles(
              articles.map((a) => (selectedArticles.includes(a.id) ? { ...a, status: "draft", publishDate: null } : a)),
            )
            break
          default:
            break
        }

        setSelectedArticles([])
        setShowConfirmation(true)
        setTimeout(() => setShowConfirmation(false), 3000)
      },
    })
  }

  // Handle undo/redo
  const handleUndo = () => {
    if (undoStack.length > 0) {
      const prevState = undoStack[undoStack.length - 1]
      setRedoStack([...redoStack, [...articles]])
      setArticles(prevState)
      setUndoStack(undoStack.slice(0, -1))
    }
  }

  const handleRedo = () => {
    if (redoStack.length > 0) {
      const nextState = redoStack[redoStack.length - 1]
      setUndoStack([...undoStack, [...articles]])
      setArticles(nextState)
      setRedoStack(redoStack.slice(0, -1))
    }
  }

  // Handle featured image selection
  const handleSelectFeaturedImage = (media) => {
    setEditingArticle({ ...editingArticle, featuredImage: media.url })
    setShowMediaLibrary(false)
  }

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="manage-articles-container">
        <div className="admin-header">
          <h1>Manage Articles</h1>
          <div className="admin-actions">
            <button className="action-button undo-button" disabled={undoStack.length === 0} onClick={handleUndo}>
              <i className="fas fa-undo"></i> Undo
            </button>
            <button className="action-button redo-button" disabled={redoStack.length === 0} onClick={handleRedo}>
              <i className="fas fa-redo"></i> Redo
            </button>
            <button className="action-button primary-button" onClick={handleNewArticle}>
              <i className="fas fa-plus"></i> Add Article
            </button>
          </div>
        </div>

        {isEditing ? (
          <div className="edit-article-panel">
            <div className="panel-header">
              <h2>{editingArticle.id ? "Edit Article" : "New Article"}</h2>
              <div className="panel-actions">
                <button className="action-button" onClick={handleCancelEdit}>
                  Cancel
                </button>
                <button className="action-button primary-button" onClick={handleSaveArticle}>
                  Save Article
                </button>
              </div>
            </div>

            <div className="panel-content">
              <div className="article-edit-form">
                <div className="form-section article-info">
                  <div className="form-group">
                    <label>Title</label>
                    <input
                      type="text"
                      value={editingArticle.title}
                      onChange={(e) => setEditingArticle({ ...editingArticle, title: e.target.value })}
                      placeholder="Article title"
                    />
                  </div>

                  <div className="form-group">
                    <label>Excerpt</label>
                    <textarea
                      value={editingArticle.excerpt}
                      onChange={(e) => setEditingArticle({ ...editingArticle, excerpt: e.target.value })}
                      placeholder="Brief summary of the article"
                    />
                  </div>

                  <div className="form-row">
                    <div className="form-group">
                      <label>Category</label>
                      <select
                        value={editingArticle.category}
                        onChange={(e) => setEditingArticle({ ...editingArticle, category: e.target.value })}
                      >
                        <option value="">Select Category</option>
                        {categories.map((category) => (
                          <option key={category.id} value={category.id}>
                            {category.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div className="form-group">
                      <label>Author</label>
                      <input
                        type="text"
                        value={editingArticle.author}
                        onChange={(e) => setEditingArticle({ ...editingArticle, author: e.target.value })}
                        placeholder="Article author"
                      />
                    </div>
                  </div>

                  <div className="form-group">
                    <label>Tags</label>
                    <TagSelector
                      selectedTags={editingArticle.tags}
                      setSelectedTags={(tags) => setEditingArticle({ ...editingArticle, tags })}
                    />
                  </div>

                  <div className="form-row">
                    <div className="form-group">
                      <label>Status</label>
                      <select
                        value={editingArticle.status}
                        onChange={(e) => {
                          const newStatus = e.target.value
                          const newArticle = { ...editingArticle, status: newStatus }

                          // If changing to published, set publish date to now if not already set
                          if (newStatus === "published" && !editingArticle.publishDate) {
                            newArticle.publishDate = new Date().toISOString()
                          }

                          // If changing to draft, clear publish date
                          if (newStatus === "draft") {
                            newArticle.publishDate = null
                          }

                          setEditingArticle(newArticle)
                        }}
                      >
                        <option value="draft">Draft</option>
                        <option value="published">Published</option>
                        <option value="scheduled">Scheduled</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>Publish Date</label>
                      <SchedulingCalendar
                        publishDate={editingArticle.publishDate}
                        setPublishDate={(date) => {
                          const newArticle = { ...editingArticle, publishDate: date }

                          // Update status based on publish date
                          if (date) {
                            const publishDate = new Date(date)
                            const now = new Date()

                            if (publishDate > now) {
                              newArticle.status = "scheduled"
                            } else {
                              newArticle.status = "published"
                            }
                          }

                          setEditingArticle(newArticle)
                        }}
                      />
                    </div>
                  </div>

                  <div className="form-group">
                    <label>Featured Image</label>
                    <div className="featured-image-selector">
                      {editingArticle.featuredImage ? (
                        <div className="featured-image-preview">
                          <img src={editingArticle.featuredImage || "/placeholder.svg"} alt="Featured" />
                          <button
                            className="remove-image-btn"
                            onClick={() => setEditingArticle({ ...editingArticle, featuredImage: "" })}
                          >
                            <i className="fas fa-times"></i>
                          </button>
                        </div>
                      ) : (
                        <button className="select-image-btn" onClick={() => setShowMediaLibrary(true)}>
                          <i className="fas fa-image"></i>
                          <span>Select Featured Image</span>
                        </button>
                      )}
                    </div>
                  </div>
                </div>

                <div className="form-section article-content">
                  <div className="editor-container">
                    <div className="editor-header">
                      <h3>Content</h3>
                      <div className="editor-tabs">
                        <button className="editor-tab active">Edit</button>
                        <button className="editor-tab">Preview</button>
                      </div>
                    </div>

                    <div className="editor-preview-container">
                      <RichTextEditor
                        content={editingArticle.content}
                        setContent={(content) => setEditingArticle({ ...editingArticle, content })}
                      />
                      <ContentPreview content={editingArticle.content} />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <>
            <div className="filter-bar">
              <div className="search-box">
                <input
                  type="text"
                  placeholder="Search articles..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <i className="fas fa-search"></i>
              </div>

              <div className="filter-options">
                <select value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)}>
                  <option value="">All Categories</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>

                <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
                  <option value="">All Statuses</option>
                  <option value="published">Published</option>
                  <option value="draft">Draft</option>
                  <option value="scheduled">Scheduled</option>
                </select>
              </div>
            </div>

            {selectedArticles.length > 0 && (
              <div className="bulk-actions">
                <span>{selectedArticles.length} articles selected</span>
                <div className="action-buttons">
                  <button className="action-button" onClick={() => handleBulkAction("publish")}>
                    Publish
                  </button>
                  <button className="action-button" onClick={() => handleBulkAction("draft")}>
                    Move to Draft
                  </button>
                  <button className="action-button danger-button" onClick={() => handleBulkAction("delete")}>
                    Delete
                  </button>
                </div>
              </div>
            )}

            <div className="articles-table">
              <table>
                <thead>
                  <tr>
                    <th className="checkbox-column">
                      <input
                        type="checkbox"
                        checked={selectedArticles.length === filteredArticles.length && filteredArticles.length > 0}
                        onChange={toggleSelectAll}
                      />
                    </th>
                    <th className="image-column">Image</th>
                    <th
                      className={`sortable ${sortField === "title" ? "sorted" : ""}`}
                      onClick={() => handleSort("title")}
                    >
                      Title
                      {sortField === "title" && (
                        <i className={`fas fa-sort-${sortDirection === "asc" ? "up" : "down"}`}></i>
                      )}
                    </th>
                    <th
                      className={`sortable ${sortField === "author" ? "sorted" : ""}`}
                      onClick={() => handleSort("author")}
                    >
                      Author
                      {sortField === "author" && (
                        <i className={`fas fa-sort-${sortDirection === "asc" ? "up" : "down"}`}></i>
                      )}
                    </th>
                    <th
                      className={`sortable ${sortField === "category" ? "sorted" : ""}`}
                      onClick={() => handleSort("category")}
                    >
                      Category
                      {sortField === "category" && (
                        <i className={`fas fa-sort-${sortDirection === "asc" ? "up" : "down"}`}></i>
                      )}
                    </th>
                    <th>Tags</th>
                    <th
                      className={`sortable ${sortField === "status" ? "sorted" : ""}`}
                      onClick={() => handleSort("status")}
                    >
                      Status
                      {sortField === "status" && (
                        <i className={`fas fa-sort-${sortDirection === "asc" ? "up" : "down"}`}></i>
                      )}
                    </th>
                    <th
                      className={`sortable ${sortField === "publishDate" ? "sorted" : ""}`}
                      onClick={() => handleSort("publishDate")}
                    >
                      Published
                      {sortField === "publishDate" && (
                        <i className={`fas fa-sort-${sortDirection === "asc" ? "up" : "down"}`}></i>
                      )}
                    </th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredArticles.map((article) => (
                    <motion.tr
                      key={article.id}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className={selectedArticles.includes(article.id) ? "selected" : ""}
                    >
                      <td className="checkbox-column">
                        <input
                          type="checkbox"
                          checked={selectedArticles.includes(article.id)}
                          onChange={() => toggleArticleSelection(article.id)}
                        />
                      </td>
                      <td className="image-column">
                        {article.featuredImage ? (
                          <img src={article.featuredImage || "/placeholder.svg"} alt={article.title} />
                        ) : (
                          <div className="no-image">No Image</div>
                        )}
                      </td>
                      <td className="title-column">
                        <div className="article-title">{article.title}</div>
                        <div className="article-excerpt">{article.excerpt.substring(0, 60)}...</div>
                      </td>
                      <td>{article.author}</td>
                      <td>{categories.find((c) => c.id === article.category)?.name || article.category}</td>
                      <td className="tags-column">
                        {article.tags.map((tag, index) => (
                          <span key={index} className="tag">
                            {tag}
                          </span>
                        ))}
                      </td>
                      <td>
                        <span className={`status-badge ${article.status}`}>
                          {article.status.charAt(0).toUpperCase() + article.status.slice(1)}
                        </span>
                      </td>
                      <td>
                        {article.publishDate ? new Date(article.publishDate).toLocaleDateString() : "Not published"}
                      </td>
                      <td className="actions-column">
                        <button className="action-icon-button" onClick={() => handleEditArticle(article)}>
                          <i className="fas fa-edit"></i>
                        </button>
                        <button
                          className="action-icon-button danger"
                          onClick={() => {
                            setSelectedArticles([article.id])
                            handleBulkAction("delete")
                          }}
                        >
                          <i className="fas fa-trash-alt"></i>
                        </button>
                      </td>
                    </motion.tr>
                  ))}
                </tbody>
              </table>
            </div>
          </>
        )}

        {/* Confirmation dialog */}
        {confirmationAction && (
          <div className="confirmation-dialog">
            <div className="confirmation-content">
              <h3>Confirm Action</h3>
              <p>
                {confirmationAction.type === "delete"
                  ? `Are you sure you want to delete ${selectedArticles.length} article(s)?`
                  : `Are you sure you want to ${confirmationAction.type} ${selectedArticles.length} article(s)?`}
              </p>
              <div className="confirmation-actions">
                <button className="action-button" onClick={() => setConfirmationAction(null)}>
                  Cancel
                </button>
                <button
                  className={`action-button ${confirmationAction.type === "delete" ? "danger-button" : "primary-button"}`}
                  onClick={() => {
                    confirmationAction.callback()
                    setConfirmationAction(null)
                  }}
                >
                  Confirm
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Media library */}
        {showMediaLibrary && (
          <MediaLibrary
            mediaItems={mediaItems}
            onSelectMedia={handleSelectFeaturedImage}
            onClose={() => setShowMediaLibrary(false)}
          />
        )}

        {/* Success notification */}
        <AnimatePresence>
          {showConfirmation && (
            <motion.div
              className="success-notification"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 50 }}
            >
              <i className="fas fa-check-circle"></i>
              <span>Changes saved successfully!</span>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </DndProvider>
  )
}

export default ManageArticles
